ATLists is a library for creating various lists and seamlessly storing those lists in a database. 
A List is more simple - it will have Categories, and those Categories will have Entries.
A Tree is a multylayered list. A Tree will have Branches that will have Entries and more Branches.
Both have their most appropriate uses.

In order to have a big variety of data storage unit types and not waste storage on multypurpous containers, we have
many interfaces that are implemented when needed, each having its own data storage. The reason for this is
because C# does not allow for multiple inheritence. "ATLists.Interfaces" contains all those different interfaces 
this library is centered around, and in "Documentation" you can find the implementations of those interfaces,
you can copy paste.

Sql Types
Each interface has a coresponding SQL type that resides in "ATLists.Sql" namespace and is used to
facilitate database storage, via the "sqlite-net-pcl" library. The static class "ATLists.Sql.Procedures" contains 
Insert and Update functions for each of those SQL types, as well as dictionaries that contain those types by 
database Id. 
"ATLists.Sql.Procedures" also contains other database maintainance methods.

Interfaces:
Interfaces are the core component of this library. Every interface has:
-	An instance of its corresponding SQL object
-	A data storage in the form of one or more properties that are "{Get; Private Set;}" (which is important),
	that may or may not be in a corresponding class from "ATLists.Basics"
-	Data setters and manipulators - Methods that set the data in the data storage, while changing it in
	the SQL object and saving the SQL object to the database at the same time
-	/OPTIONAL/ Compound getters/setters are methods that retrieve or modify a combination of a couple of properties.









Newtonsoft.Json is used for that